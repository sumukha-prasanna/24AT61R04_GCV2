# -*- coding: utf-8 -*-
"""LawnEnv.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RpGyh7S1S4r1WGU6dF6z_YSbLV4Xrg1S
"""

"""
24AT61R04
Sumukha Prasanna Kumar
GCV2 - Grass Cutting on a Sunny Day [Version 2]
"""
import numpy as np
import gym
from gym import spaces
from collections import defaultdict
import matplotlib.pyplot as plt

class LawnEnv(gym.Env):
    def __init__(self, N, M, K, T, t):
        super(LawnEnv, self).__init__()

        self.N = N
        self.M = M
        self.K = K
        self.T = T
        self.t = t

        self.action_space = spaces.Discrete(4)

        self.observation_space = spaces.Tuple((
            spaces.Discrete(N),
            spaces.Discrete(M),
            spaces.Discrete(T + K * t + 1),
            spaces.MultiBinary((N, M))
        ))

        self.reset()

    def _place_water_bottles(self):
        bottles = set()
        while len(bottles) < self.K:
            bottle_pos = (np.random.randint(0, self.N), np.random.randint(0, self.M))
            if bottle_pos != (0, 0) and bottle_pos not in bottles:
                bottles.add(bottle_pos)
        return bottles

    def _initialize_grid_and_bottles(self):
        self.grid = np.zeros((self.N, self.M), dtype=np.int8)
        self.water_bottles = self._place_water_bottles()

    def reset(self):
        self.farmer_pos = [0, 0]
        self.time_left = self.T
        self._initialize_grid_and_bottles()
        self.done = False
        return self._get_obs()

    def step(self, action):
        if action == 0 and self.farmer_pos[0] > 0:
            self.farmer_pos[0] -= 1
        elif action == 1 and self.farmer_pos[1] < self.M - 1:
            self.farmer_pos[1] += 1
        elif action == 2 and self.farmer_pos[0] < self.N - 1:
            self.farmer_pos[0] += 1
        elif action == 3 and self.farmer_pos[1] > 0:
            self.farmer_pos[1] -= 1

        self.grid[self.farmer_pos[0], self.farmer_pos[1]] = 1

        self.time_left -= 1

        if tuple(self.farmer_pos) in self.water_bottles:
            self.time_left += self.t
            self.water_bottles.remove(tuple(self.farmer_pos))

        self.done = self.time_left <= 0 or np.all(self.grid)
        reward = 1 if np.all(self.grid) else -1 if self.done else 0

        return self._get_obs(), reward, self.done, {}

    def _get_obs(self):
        grid_flat = self.grid.flatten()
        return (self.farmer_pos[0], self.farmer_pos[1], self.time_left, tuple(grid_flat))

    def render(self):
        print(f"Farmer position: {self.farmer_pos}")
        print(f"Time left: {self.time_left}")
        print("Lawn grid (0=uncut, 1=cut):")
        print(self.grid)